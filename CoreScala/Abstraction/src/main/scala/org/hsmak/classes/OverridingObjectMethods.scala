package org.hsmak.classes

object OverridingObjectMethods extends App {

  object OverrideToStringEqualHash {


    /**
      * Notice the val for introducing accessors so they can be used in teh equals() & hashCode() methods
      * @param firstName
      * @param lastName
      */
    class Manager(val firstName: String,
                  val lastName: String) {


      //keyword 'override' is mandatory otherwise it will be a compile error
      override def equals(obj: Any): Boolean = {
        //Notice the 'Any' instead of Object in Java
        if (!obj.isInstanceOf[Manager]) false
        else {
          val other = obj.asInstanceOf[Manager]

          //this is a boolean expression if you look carefully, and it's the return value
          other.firstName == this.firstName &&
            other.lastName == this.lastName
        }
      }

      /**
        * overriding hashCode()
        *
        * @return
        */
      override def hashCode(): Int = {
        //generated by IntelliJ
        /*val state = Seq(firstName, lastName)
      state.map(_.hashCode()).foldLeft(0)((a, b) => 31 * a + b)*/

        var result = 19 //var will be used only within this method so there will be no side effect
        result = 31 * result + firstName.hashCode
        result = 31 * result + lastName.hashCode
        result

      }
    }

    println(new Manager("First", "Last") equals new Manager("First", "Last")) // value equality
    println(new Manager("First", "Last") == new Manager("First", "Last")) // value equality
    println(new Manager("First", "Last") eq new Manager("First", "Last")) // reference equality

  }

  OverrideToStringEqualHash
  println


  // using the 'String.equals()' .. However, Scala's '==' is actually a value equality rather than reference equality!!
  /*override def equals(obj: Any): Boolean = {
  //Notice the 'Any' instead of Object in Java
  if (!obj.isInstanceOf[Manager]) false
  else {
    val other = obj.asInstanceOf[Manager]

    //this is a boolean expression if you look carefully, and it's the return value
    other.firstName.equals(this.firstName) &&
      other.lastName.equals(this.lastName) &&
      other.age.equals(this.age)
  }
}*/

  //Using '==' instead of '.equals()'
  //Scala's '==' is actually a value equality rather than reference equality!!
  // the operator 'eq' is used for reference equality
  /*
scala> val str1 = new String("a")
str1: String = a

scala> val str2 = new String("a")
str2: String = a

scala> str1 eq str2
res5: Boolean = false

scala> str1 equals str2
res6: Boolean = true

scala> str1 == str2
res7: Boolean = true

 */
}
